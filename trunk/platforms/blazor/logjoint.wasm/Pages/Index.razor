@page "/"

@using System
@using LogJoint
@using LogJoint.UI.Presenters.SourcesList
@implements IDisposable
@inject LogJoint.ModelObjects model
@inject LogJoint.Wasm.ViewModelObjects viewModel
@inject IJSRuntime jsRuntime;
@inject TraceListener traceListener;

<div class='main-window'>
    <div class='container-1'>
        <div class='top'>
            <p>Responsiveness meter: @currentCount</p>

            <button @onclick="LoadLog">Load log</button>
            <input type="file" @ref="fileInputReference" />
            <button @onclick="LoadByUrl">Load by blob URL</button>
            <button @onclick="LoadStream">Load Stream</button>
            <button @onclick="DownloadDebugLog">Download debug log</button>

            <table>
                <thead>
                    <tr>
                        <th>check</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (IViewItem item in @viewModel.SourcesList.RootItem.Children)
                    {
                        <tr @key=@item.Key>
                            <td><input type="checkbox" checked=@item.Checked @onchange="@((_) => viewModel.SourcesList.OnItemCheck(item, !item.Checked.GetValueOrDefault()))" /></td>
                            <td>@item.ToString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class='bottom container-2'>
            <div class='timeline left'>timeline</div>
            <div class='right container-3'>

                <div class='top loaded-messages'>
                    <div class='toolbar'>
                        <button class='bookmark'></button>
                        <button>raw log</button>
                        <span>coloring:</span>
                        <select>
                            <option>None</option>
                            <option>Threads</option>
                            <option>Log Sources</option>
                        </select>
                        <button>tail</button>
                    </div>
                    <div class='viewer'>
                        <LogJoint.Wasm.UI.LogViewer.LogViewer Class="viewer-grow" />
                    </div>
                </div>

                <div class='bottom'>search results</div>
            </div>
        </div>
    </div>
</div>

@code {
    private int currentCount = 0;
    private ISubscription subscription;
    ElementReference fileInputReference;

    private async Task LoadLog()
    {
        currentCount++;
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(
                await jsRuntime.InvokeAsync<string>("logjoint.getResourceUrl", "test_chrome_debug.log"))) },
            "Processing test"
        );
        while (!task.IsCompleted)
        {
            await Task.Delay(100);
            currentCount++;
            StateHasChanged();
        }
        await task;
    }

    protected override void OnInitialized()
    {
        var vm = viewModel.SourcesList;

        var updateLines = Updaters.Create(
            () => vm.RootItem,
            _ => StateHasChanged()
        );

        subscription = vm.ChangeNotification.CreateSubscription(() =>
        {
            updateLines();
        });
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    async void LoadByUrl()
    {
        var url = await jsRuntime.InvokeAsync<string>("logjoint.files.getUrl", fileInputReference);
        Console.WriteLine("Blob url: {0}", url);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(url)) },
            "Processing blob URL test"
        );
    }

    async void LoadStream()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(fileName)) },
            "Processing virtual file name"
        );
    }

    async void DownloadDebugLog()
    {
        var entries = traceListener.ClearMemBufferAndGetCurrentEntries();
        using (var writer = new System.IO.StringWriter())
        {
            entries.ForEach(e => e.Write(writer));
            await jsRuntime.InvokeVoidAsync("logjoint.saveAs", writer.ToString(), string.Format(@"wasm-debug-{0:yyyy-MM-ddTHH-mm-ss}.log", DateTime.Now));
        }
    }
}
