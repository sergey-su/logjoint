@page "/"

@using System
@using LogJoint
@using LogJoint.UI.Presenters.SourcesList
@implements IDisposable
@inject LogJoint.ModelObjects model
@inject LogJoint.Wasm.ViewModelObjects viewModel
@inject IJSRuntime jsRuntime;
@inject TraceListener traceListener;

<div class='main-window'>
    <div class='container-1'>
        <div class='top'>
            <button @onclick="LoadLog">Load log</button>
            <input type="file" @ref="fileInputReference" />
            <button @onclick="LoadByUrl">Load by blob URL</button>
            <button @onclick="LoadStream">Load Stream</button>
            <button @onclick="DownloadDebugLog">Download debug log</button>

            <table>
                <thead>
                    <tr>
                        <th>check</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (IViewItem item in @viewModel.SourcesList.RootItem.Children)
                    {
                        <tr @key=@item.Key>
                            <td><input type="checkbox" checked=@item.Checked @onchange="@((_) => viewModel.SourcesList.OnItemCheck(item, !item.Checked.GetValueOrDefault()))" /></td>
                            <td>@item.ToString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class='bottom container-2'>
            <div class='timeline left'>timeline</div>
            <div class='right container-3'>
                <LogJoint.Wasm.UI.LoadedMessages.LoadedMessages Class="top" />
                <div class='bottom'>search results</div>
            </div>
        </div>
    </div>
</div>


@code {
	private ISubscription subscription;
	ElementReference fileInputReference;

	private async Task LoadLog()
	{
		await model.LogSourcesPreprocessings.Preprocess(
			new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(
				await jsRuntime.InvokeAsync<string>("logjoint.getResourceUrl", "test_chrome_debug.log"))) },
			"Processing test"
		);
	}

	protected override void OnInitialized()
	{
		var vm = viewModel.SourcesList;

		var updateLines = Updaters.Create(
			() => vm.RootItem,
			_ => StateHasChanged()
		);

		subscription = vm.ChangeNotification.CreateSubscription(() =>
		{
			updateLines();
		});
	}

	public void Dispose()
	{
		subscription?.Dispose();
	}

	async void LoadByUrl()
	{
		var url = await jsRuntime.InvokeAsync<string>("logjoint.files.getUrl", fileInputReference);
		Console.WriteLine("Blob url: {0}", url);
		var task = model.LogSourcesPreprocessings.Preprocess(
			new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(url)) },
			"Processing blob URL test"
		);
	}

	async void LoadStream()
	{
		var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
		var fileName = await fs.AddFileFromInput(fileInputReference);
		Console.WriteLine("Virtual file name : {0}", fileName);
		var factory = (IFileBasedLogProviderFactory)model.UserDefinedFormatsManager.Items.Single(f => f.FormatName == "Chrome debug log");
		model.LogSourcesManager.Create(factory, factory.CreateParams(fileName));
	}

	async void DownloadDebugLog()
	{
		var entries = traceListener.ClearMemBufferAndGetCurrentEntries();
		using (var writer = new System.IO.StringWriter())
		{
			entries.ForEach(e => e.Write(writer));
			await jsRuntime.InvokeVoidAsync("logjoint.saveAs", writer.ToString(), string.Format(@"wasm-debug-{0:yyyy-MM-ddTHH-mm-ss}.log", DateTime.Now));
		}
	}
}
