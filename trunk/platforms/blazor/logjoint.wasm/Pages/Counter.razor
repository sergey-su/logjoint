@page "/counter"
@using System
@using LogJoint
@using LogJoint.UI.Presenters.SourcesList
@implements IDisposable
@inject LogJoint.ModelObjects model
@inject LogJoint.Wasm.ViewModelObjects viewModel
@inject IJSRuntime jsRuntime;

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="LoadLog">Load log</button>

<table>
    <thead>
        <tr>
            <th>check</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (IViewItem item in @viewModel.SourcesList.RootItem.Children)
        {
            <tr @key=@item.Key>
                <td><input type="checkbox" checked=@item.Checked @onchange="@((_) => viewModel.SourcesList.OnItemCheck(item, !item.Checked.GetValueOrDefault()))" /></td>
                <td>@item.ToString()</td>
            </tr>
        }
    </tbody>
</table>
<LogJoint.Wasm.UI.LogViewer.LogViewer />

<input type="file" @ref="fileInputReference" />
<button class="btn btn-primary" @onclick="LoadByUrl">Load by blob URL</button>
<button class="btn btn-primary" @onclick="LoadStream">Load Stream</button>

@code {
    private int currentCount = 0;
    private ISubscription subscription;
    ElementReference fileInputReference;

    private async Task LoadLog()
    {
        currentCount++;
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(
                await jsRuntime.InvokeAsync<string>("logjoint.getResourceUrl", "xmlwritertracelistener1.xml"))) },
            "Processing test"
        );
        while (!task.IsCompleted)
        {
            await Task.Delay(100);
            currentCount++;
            StateHasChanged();
        }
        await task;
    }

    protected override void OnInitialized()
    {
        var vm = viewModel.SourcesList;

        var updateLines = Updaters.Create(
            () => vm.RootItem,
            _ => StateHasChanged()
        );

        subscription = vm.ChangeNotification.CreateSubscription(() =>
        {
            updateLines();
        });
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    async void LoadByUrl()
    {
        var url = await jsRuntime.InvokeAsync<string>("logjoint.files.getUrl", fileInputReference);
        Console.WriteLine("Blob url: {0}", url);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(url)) },
            "Processing blob URL test"
        );
    }

    async void LoadStream()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(fileName)) },
            "Processing virtual file name"
        );
    }
}
