@namespace  LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.Reactive
@using System.Collections.Generic;
@using System.Collections.Immutable;
@using Microsoft.JSInterop
@inject JsInterop jsInterop
@implements IDisposable

<ul class="list nice-scroll @Class" @onkeydown="HandleKey" @ref="ListRef">
    @{var itemIndex = 0;}
    @foreach (var item in Items)
    {
        var itemIndexCopy = itemIndex;
        <li @key="@item.Key" class="@(item.IsSelected ? "selected" : "") @(itemIndex == establishedPrimary ? "primary" : "") @ItemClass"
        @onmousedown="@(e => SelectByMouse(itemIndexCopy, e))"
        tabindex="@(itemIndex == establishedPrimary ? 0 : -1)">
            @if (ItemTemplate != null)
            {
                @ItemTemplate(item);
            }
            else
            {
                @item.ToString()
            }
        </li>
        itemIndex++;
    }
</ul>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private ISubscription subscription;
    private Func<ImmutableHashSet<int>> getSelected;
    private int? candidatePrimary;
    private int? establishedPrimary;
    private Action primaryChangeSideEffects;

    public ElementReference ListRef { get; private set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IReadOnlyList<IListItem> Items { get; set; }

    [Parameter]
    public Action<IEnumerable<IListItem>> OnSelect { get; set; }

    [Parameter]
    public Action<IListItem> OnDoubleClick { get; set; }

    [Parameter]
    public Action OnSelectAll { get; set; }

    [Parameter]
    public RenderFragment<IListItem> ItemTemplate { get; set; } // todo: pass focus to item template

    [Parameter]
    public string ItemClass { get; set; } = "";

    [Parameter]
    public Action<KeyboardEventArgs, IListItem> OnKeyDown { get; set; }

    [Parameter, EditorRequired]
    public IChangeNotification ChangeNotification { get; set; }

    [Parameter]
    public bool SelectByNonLeftClick { get; set; } = true;

    protected override void OnInitialized()
    {
        getSelected = Selectors.Create(() => Items, items =>
            ImmutableHashSet.CreateRange(items
                .Select((item, idx) => item.IsSelected ? new int?(idx) : new int?())
                .Where(i => i.HasValue)
                .Select(i => i.Value)));

        var updateEstablishedPrimary = Updaters.Create(getSelected, selected => {
            establishedPrimary =
                candidatePrimary.HasValue && selected.Contains(candidatePrimary.Value) ? candidatePrimary :
                selected.Count > 0 ? selected.First() :
                new int?();
        });

        primaryChangeSideEffects = Updaters.Create(() => establishedPrimary, async p =>
        {
            if (!p.HasValue)
                return;
            await JSRuntime.InvokeVoidAsync("logjoint.list.scrollListItemIntoView", ListRef, p.Value);
            await JSRuntime.InvokeVoidAsync("logjoint.list.focusPrimaryListItem", ListRef);
        });

        var updateOnPrimaryChange = Updaters.Create(() => establishedPrimary, p =>
        {
            StateHasChanged();
        });

        subscription = ChangeNotification.CreateSubscription(() =>
        {
            updateEstablishedPrimary();
            updateOnPrimaryChange();
        });
    }

    void SelectByMouse(int i, MouseEventArgs e)
    {
        if (e.Button != 0 && !SelectByNonLeftClick)
            return;
        candidatePrimary = i;
        if (jsInterop.Keyboard.HasEditKey(e))
        {
            var currentlySelected = getSelected();
            var proposedSelection = currentlySelected.Contains(i) ?
                currentlySelected.Remove(i) : currentlySelected.Add(i);
            OnSelect?.Invoke(proposedSelection.Select(i => Items[i]));
        }
        else if (e.ShiftKey)
        {
            if (establishedPrimary != null)
            {
                int from = Math.Min(establishedPrimary.Value, i);
                int to = Math.Max(establishedPrimary.Value, i);
                OnSelect?.Invoke(Enumerable.Range(from, to - from + 1).Select(i => Items[i]));
            }
        }
        else
        {
            OnSelect?.Invoke(new[] { Items[i] });
        }

        bool doubleClick = e.Detail > 1;
        if (doubleClick)
        {
            OnDoubleClick?.Invoke(Items[i]);
        }
    }

    void HandleKey(KeyboardEventArgs eventArgs)
    {
        int? selectionDelta =
            eventArgs.Key == "ArrowUp" ? -1 :
            eventArgs.Key == "ArrowDown" ? +1 :
            null;
        if (selectionDelta != null)
        {
            if (establishedPrimary != null && Items.Count > 0)
            {
                var i = Math.Clamp(establishedPrimary.Value + selectionDelta.Value, 0, Items.Count - 1);
                candidatePrimary = i;
                if (eventArgs.ShiftKey)
                {
                    OnSelect?.Invoke(getSelected().Add(i).Select(i => Items[i]));
                }
                else
                {
                    OnSelect?.Invoke(new[] { Items[i] });
                }
            }
            return;
        }

        OnKeyDown?.Invoke(eventArgs, Items.ElementAtOrDefault(establishedPrimary.GetValueOrDefault(-1)));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsInterop.Keyboard.AddDefaultPreventingHandler(ListRef, "ArrowUp", "ArrowDown");
            await jsInterop.Keyboard.AddHandler(ListRef, new KeyboardInterop.Options
            {
                PreventDefault = true,
                Handler = () => OnSelectAll?.Invoke()
            }, "Edit+A/i");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        primaryChangeSideEffects();
    }
}
