@namespace LogJoint.Wasm.UI.Postprocessing
@using LogJoint.UI.Presenters.Postprocessing.StateInspectorVisualizer

<div class="objects-tree @Class">
    <div class="toolbar">
        <span>Objects:</span>
        @if (IsNotificationsIconVisibile)
        { 
            <button class="notification-icon" @onclick="@ViewModel.OnActiveNotificationButtonClicked" 
                    title="This view has warnings. Click to see."></button>
        }
    </div>
    <TreeView Class="the-tree" NodeClass="si-node" Root="@ObjectsTreeRoot"
              ChangeNotification="@ViewModel.ChangeNotification"
              OnSelect="@(nodes => ViewModel.OnSelect(nodes.OfType<IObjectsTreeNode>().ToArray()))"
              OnExpand="@(node => ViewModel.OnExpandNode(node as IObjectsTreeNode))"
              OnCollapse="@(node => ViewModel.OnCollapseNode(node as IObjectsTreeNode))"
              OnKeyDown="HandleKeyDown"
              OnRightClick="HandleRightClick">
        <NodeTemplate>
            @{var node = (IObjectsTreeNode)context;}
            @{var paintInfo = PaintNode(node, getPrimaryPropValue: true);}
            @{var dark = ViewModel.ColorTheme == LogJoint.UI.Presenters.ColorThemeMode.Dark;}
            @{var coloringClass = 
                node.IsSelected ? "" : 
                paintInfo.Coloring == NodeColoring.Alive ? "l" : 
                paintInfo.Coloring == NodeColoring.Deleted ? "d" : 
                ""; }
            @{var coloringStyle =
                  node.IsSelected ? "" :
                  paintInfo.Coloring == NodeColoring.LogSource ?
                      $"{(dark ? "color" : "background-color")}: {LogJoint.Drawing.ColorExtensions.ToHtmlColor(paintInfo.LogSourceColor.Value)}" :
                  ""; }
            @if (paintInfo.DrawFocusedMsgMark)
            {
                <span class="f"></span>
            }
            <span class="n @coloringClass" style=@coloringStyle title=@(context.ToString())>
                @if (!string.IsNullOrEmpty(paintInfo.Annotation))
                {
                    <span class="annotation">@paintInfo.Annotation</span>
                }
                @context.ToString()
            </span>
            @if (!string.IsNullOrEmpty(paintInfo.PrimaryPropValue))
            {
                <span class="p @coloringClass" style=@coloringStyle><span>@paintInfo.PrimaryPropValue</span></span>
            }
        </NodeTemplate>
    </TreeView>
    @if (ViewModel.ObjectDescription != null)
    {
        <div class="desc">
            @foreach (var segment in TextUtils.ExtractLinks(ViewModel.ObjectDescription))
            {
                if (!string.IsNullOrEmpty(segment.linkUrl))
                {
                    <a href="@segment.linkUrl" target="_blank">@segment.text</a>
                }
                else
                {
                    <span>@segment.text</span>
                }
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IViewModel ViewModel { get; set; }

    [Parameter]
    public LogJoint.UI.Presenters.IContextMenu ContextMenuPresenter { get; set; }

    [Parameter]
    public IObjectsTreeNode ObjectsTreeRoot { get; set; }

    [Parameter]
    public bool IsNotificationsIconVisibile { get; set; }

    [Parameter]
    public PaintNodeDelegate PaintNode { get; set; }

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        if (eventArgs.Key == "Delete" || eventArgs.Key == "Backspace")
            ViewModel.OnNodeDeleteKeyPressed();
    }

    void HandleRightClick(MouseEventArgs e, LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        var menu = ViewModel.OnNodeMenuOpening();
        ContextMenuPresenter.ShowMenu(menu.Items.Select(
            i => new LogJoint.UI.Presenters.ContextMenuItem(i.Text, i.Click)).ToList(),
            new Drawing.PointF((float)e.ClientX, (float)e.ClientY));
    }
}
