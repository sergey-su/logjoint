@using LogJoint.UI.Presenters.Postprocessing.StateInspectorVisualizer
@using LogJoint.UI.Presenters
@namespace LogJoint.Wasm.UI.Postprocessing
@inject JsInterop jsInterop
@implements IDisposable

<div class=@ResizerClass @ref="resizerElement"></div>
<div class='history @Class' @ref="element" style="@GetHistoryStyle()">
    <div class="toolbar">
        <div>Change history:</div>
        <div class="resizer" @ref="toolBarResizerElement">::::::</div>
    </div>
    <ListView Class="the-list"
              Items="@Items"
              OnSelect="@(items => ViewModel.OnChangeHistoryChangeSelection(items.OfType<IStateHistoryItem>()))"
              OnDoubleClick="@(item => ViewModel.OnChangeHistoryItemDoubleClicked((IStateHistoryItem)item))"
              ChangeNotification="@ViewModel.ChangeNotification"
              OnKeyDown="HandleKeyDown">
        <ItemTemplate>
            @{var item = (IStateHistoryItem)context;}
            @{var f = FocusedMessagePositionInChangeHistory; }
            @{var focusedMarkClass =
                      f == null ? "" :
                      f.UpperBound == item.Index + 1 ? (f.LowerBound != f.UpperBound ? "f" : "f l") :
                      (f.LowerBound == 0 && f.UpperBound == 0 && item.Index == 0) ? "f r" :
                      "";}
            <div class="@(IsItemBookmarked(item) ? "b" : "")"></div>
            <div class="@focusedMarkClass"><span title=@(f?.Tooltip ?? "")>&nbsp;</span></div>
            <div>@item.Time</div>
            <div>@item.Message</div>
        </ItemTemplate>
    </ListView>
</div>

@code {
    private ElementReference resizerElement, element, toolBarResizerElement;
    private IDisposable resizeHandler1, resizeHandler2;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    [Parameter]
    public double? Size { get; set; } = null;

    [Parameter]
    public IReadOnlyList<IStateHistoryItem> Items { get; set; }

    [Parameter]
    public Predicate<IStateHistoryItem> IsItemBookmarked { get; set; }

    [Parameter]
    public FocusedMessageInfo FocusedMessagePositionInChangeHistory { get; set; }

    [Parameter]
    public IViewModel ViewModel { get; set; }

    private string GetHistoryStyle() => Size.HasValue ? $"height: {100 * Size.Value}%" : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler1 = await jsInterop.Resize.InitResizer(
                resizerElement, element, ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: ViewModel.OnResizeHistory);
            resizeHandler2 = await jsInterop.Resize.InitResizer(
                toolBarResizerElement, element, ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: ViewModel.OnResizeHistory);
        }
    }

    public void Dispose()
    {
        resizeHandler1?.Dispose();
        resizeHandler2?.Dispose();
    }

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (item is IStateHistoryItem historyItem)
        {
            if (eventArgs.Key == "Enter")
            {
                ViewModel.OnChangeHistoryItemKeyEvent(historyItem, Key.Enter);
            }
            else if (eventArgs.Key == "b" || eventArgs.Key == "B")
            {
                ViewModel.OnChangeHistoryItemKeyEvent(historyItem, Key.BookmarkShortcut);
            }
            else if (eventArgs.Key.ToLower() == "c" && jsInterop.Keyboard.HasEditKey(eventArgs))
            {
                ViewModel.OnChangeHistoryItemKeyEvent(historyItem, Key.CopyShortcut);
            }
        }
    }
}
