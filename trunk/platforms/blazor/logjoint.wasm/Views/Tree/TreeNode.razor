@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.Reactive
@inject TreeStyles styles
@inject JsInterop jsInterop

<div class="node @($"c{Level}") @(Node.IsSelected ? "selected" : "") @(IsPrimary ? "primary" : "")"
     @onclick="TrySelectNodeByMouse" @onclick:stopPropagation tabindex="@(IsPrimary ? 0 : -1)" 
     @oncontextmenu="HandleRightClick" @oncontextmenu:preventDefault>
    <div class="triangle" @onclick="TryExpandCollapseByMouse" @onclick:stopPropagation>
        @(!SupportsExpansion(Node) ? " " : (Node.IsExpanded ? "▼" : "▶"))
    </div>
    <div class="contents @NodeClass">@NodeTemplate(Node)</div>
</div>

@code {
    [Parameter]
    public ITreeNode Node { get; set; }

    [Parameter]
    public TreeView Owner { get; set; }

    [Parameter]
    public int Level { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool IsPrimary { get; set; }

    [Parameter]
    public RenderFragment<ITreeNode> NodeTemplate { get; set; }

    [Parameter]
    public string NodeClass { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        await styles.EnsureNodeStyleExists(Level);
    }

    void TrySelectNodeByMouse(MouseEventArgs e)
    {
        Owner?.TrySelectNode(Index, expandSelection: jsInterop.Keyboard.HasEditKey(e), allowSelectingNothing: true);
        bool doubleClick = e.Detail > 1;
        if (doubleClick)
        {
            if (Owner?.OnDoubleClick != null)
            {
                Owner.OnDoubleClick.Invoke(Node);
            }
            else if (SupportsExpansion(Node)) 
            {
                if (Node.IsExpanded)
                    Owner?.TryCollapseNode(Node);
                else
                    Owner?.TryExpandNode(Node);
            }
        }
    }

    void HandleRightClick(MouseEventArgs e)
    {
        TrySelectNodeByMouse(e);
        if (Owner?.OnRightClick != null)
        {
            Owner.OnRightClick.Invoke(e, Node);
        }
    }

    void TryExpandCollapseByMouse(MouseEventArgs e)
    {
        if (SupportsExpansion(Node))
            if (Node.IsExpanded)
                Owner?.TryCollapseNode(Node);
            else
                Owner?.TryExpandNode(Node);
    }

    internal static bool SupportsExpansion(ITreeNode node) => node.Children.Count != 0 && node.IsExpandable;
}
