@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.Reactive
@inject TreeStyles styles

<div class="tree-node @(Node.IsSelected ? "selected" : "")" @onclick="TrySelectNodeByMouse" @onclick:stopPropagation>
    <div class="node @($"c{Level}")">
        <div class="triangle" @onclick="TryExtractCollapseByMouse" @onclick:stopPropagation>
            @(Node.Children.Count == 0 ? " " : (Node.IsExpanded ? "▼" : "▶"))
        </div>
        <div class="contents">@(Node.ToString())</div>
    </div>
    @if (Node.IsExpanded)
    {
        @foreach (var child in Node.Children)
        {
            <TreeNode Node="@child" Owner="@Owner" @key="@child.Key" Level="@(Level + 1)" />
        }
    }
</div>

@code {
    [Parameter]
    public ITreeNode Node { get; set; }

    [Parameter]
    public TreeView Owner { get; set; }

    [Parameter]
    public int Level { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await styles.EnsureNodeStyleExists(Level);
    }

    void TrySelectNodeByMouse(MouseEventArgs e)
    {
        Owner?.TrySelectNode(Node);
    }

    void TryExtractCollapseByMouse(MouseEventArgs e)
    {
        if (Node.IsExpanded)
            Owner?.TryCollapseNode(Node);
        else
            Owner?.TryExpandNode(Node);
    }
}
