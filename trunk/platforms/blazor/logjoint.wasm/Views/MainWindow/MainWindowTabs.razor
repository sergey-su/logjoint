@namespace LogJoint.Wasm.UI
@using System.Threading
@using LogJoint.UI.Presenters.MainForm;
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class='main-window-tabs @Class' @ref="tabsElement" style="@GetStyle()">
    <TabsView SelectedTab="@ViewModel.ActiveTab" Tabs="@tabNames()" OnSelect="@(i => ViewModel.OnChangeTab(ViewModel.VisibleTabs[i].Id))" />
    @switch (ViewModel.VisibleTabs[ViewModel.ActiveTab].Id)
    {
        case TabIDs.Sources:
            <LogSourcesManager Class="tab-content" />
            break;
        case TabIDs.Bookmarks:
            <BookmarksManager Class="tab-content" />
            break;
        case TabIDs.HighlightingFilteringRules:
            <FiltersManager Class="tab-content" ViewModel=@presentation.ViewModels.HlFiltersManagement/>
            break;
        case TabIDs.DisplayFilteringRules:
            <FiltersManager Class="tab-content" ViewModel=@presentation.ViewModels.DisplayFiltersManagement />
            break;
        case TabIDs.Search:
            <SearchPanel Class="tab-content" />
            break;
        case TabIDs.Postprocessing:
            <PostprocessingTabPage Class="tab-content" />
            break;
        case TabIDs.Settings:
            <SettingsTab Class="tab-content" />
            break;
    }
</div>
<div class='@ResizerClass' @ref="resizerElement" title="@ViewModel.ResizerTooltip"></div>

@code {
    private ISubscription subscription;
    private ISubscription progressSubscription;
    private IViewModel ViewModel => presentation.ViewModels.MainForm;
    private Func<IReadOnlyList<TabsView.TabInfo>> tabNames;
    private ElementReference resizerElement, tabsElement;
    private IDisposable resizeHandler;
    private int progress = 0;
    private CancellationTokenSource progressCancellation;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    protected override void OnInitialized()
    {
        tabNames = Selectors.Create(() => ViewModel.VisibleTabs, () => ViewModel.FiltersLoadingAnimationVisible, () => progress,
            (tabs, filtersLoadingAnimationVisible, progress) => tabs.Select(t => new TabsView.TabInfo
            {
                Caption = t.Id == TabIDs.Settings ? "⚙" : t.Caption,
                Class = t.Id == TabIDs.Settings ? "settings" : null,
                Progress = (t.Id == TabIDs.DisplayFilteringRules && filtersLoadingAnimationVisible) ? ((double)progress / 100.0) : null,
            }).ToArray());
        subscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (ViewModel.VisibleTabs, ViewModel.ActiveTab, ViewModel.Size, ViewModel.FiltersLoadingAnimationVisible),
            _ => StateHasChanged()
        ));
        progressSubscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => ViewModel.FiltersLoadingAnimationVisible,
            (visible) =>
            {
                if (visible == (progressCancellation != null))
                    return;
                if (!visible)
                {
                    progressCancellation.Cancel();
                    progressCancellation.Dispose();
                    progressCancellation = null;
                }
                else
                {
                    progressCancellation = new CancellationTokenSource();
                    InfiniteProgress(progressCancellation.Token);
                }
            }
        ));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler = await jsInterop.Resize.InitResizer(resizerElement, tabsElement,
                ResizeInterop.Direction.Vertical, inverse: false, relativeToParent: true, handler: ViewModel.OnResizing);
        }
    }

    public void Dispose()
    {
        subscription?.Dispose();
        progressSubscription?.Dispose();
        resizeHandler?.Dispose();
        progressCancellation?.Dispose();
    }

    string GetStyle() => ViewModel.Size.HasValue ? $"height: {100 * ViewModel.Size}%" : "";

    async void InfiniteProgress(CancellationToken tcs)
    {
        try
        {
            while (!tcs.IsCancellationRequested)
            {
                await Task.Delay(200, tcs);
                progress = (progress + 15) % 100;
                StateHasChanged();
            }
        }
        catch (TaskCanceledException)
        {
        }
    }
}
