@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.BookmarksList
@implements IDisposable
@inject LogJoint.UI.Presenters.PresentationObjects presentation
@inject JsInterop jsInterop

<ListView Items="@viewModel.Items" OnSelect="@(items => viewModel.OnChangeSelection(items.OfType<IViewItem>()))" 
Class="@ListClass" ItemClass="bookmarks-list-item"
OnDoubleClick="@(items => viewModel.OnViewDoubleClicked())"
ChangeNotification="@viewModel.ChangeNotification"
OnKeyDown="HandleKeyDown"
SelectByNonLeftClick=false>
    <ItemTemplate>
        @{var item = (IViewItem)context;}
        @{var f = viewModel.FocusedMessagePosition; }
        @{var focusedMarkClass =
                                      f == null ? "" :
                                      f.UpperBound == item.Index + 1 ? (f.LowerBound != f.UpperBound ? "f" : "f l") :
                                      (f.LowerBound == 0 && f.UpperBound == 0 && item.Index == 0) ? "f r" :
                                      "";}
        <div>@(item.Delta ?? item.AltDelta)</div>
        <div class="icon"></div>
        <div class="p @focusedMarkClass"><span title=@(f?.Tooltip ?? "")>&nbsp;</span></div>
        @if (item.IsEnabled)
        {
            <a href="#" @onclick:preventDefault @onclick="@(e => viewModel.OnBookmarkLeftClicked(item))"
            @oncontextmenu="@(e => this.HandleBookmarkContextMenu(e))" @oncontextmenu:preventDefault
            style="@GetItemStyle(item)">
                @if (!string.IsNullOrEmpty(@item.Annotation))
                {
                    <span class="annotation">@item.Annotation</span>
                }
                @item.Text
            </a>
        }
        else
        {
            <a style="@GetItemStyle(item)" class="disabled">@item.Text</a>
        }
    </ItemTemplate>
</ListView>

@code {
    private IViewModel viewModel => presentation.ViewModels.BookmarksList;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items, viewModel.FocusedMessagePosition),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    string ListClass => $"bookmarks-list {Class}";

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (eventArgs.Key == "Enter")
        {
            viewModel.OnEnterKeyPressed();
        }
        else if (eventArgs.Key.ToLower() == "c" && jsInterop.Browser.HasEditKey(eventArgs))
        {
            viewModel.OnCopyShortcutPressed();
        }
        else if (eventArgs.Key == "Delete" || eventArgs.Key == "Backspace")
        {
            viewModel.OnDeleteButtonPressed();
        }
        else if (eventArgs.Key.ToLower() == "a" && jsInterop.Browser.HasEditKey(eventArgs))
        {
            viewModel.OnSelectAllShortcutPressed();
        }
    }

    string GetItemStyle(IViewItem item)
    {
        var cl = item.IsSelected || !item.ContextColor.HasValue ? "inherit" :
                LogJoint.Drawing.ColorExtensions.ToHtmlColor(item.ContextColor.Value);
        if (viewModel.Theme == LogJoint.UI.Presenters.ColorThemeMode.Dark)
        {
            if (!item.IsEnabled)
                return "";
            return $"color: {cl}";
        }
        else
        {
            return $"background-color: {cl}";
        }
    }

    record MenuItemDesc(ContextMenuItem Bit, string Text);

    void HandleBookmarkContextMenu(MouseEventArgs e)
    {
        ContextMenuItem menuItemsMask = viewModel.OnContextMenu();
        var menuItems = new List<LogJoint.UI.Presenters.ContextMenuItem>();
        foreach (MenuItemDesc item in new[] {
            new MenuItemDesc(ContextMenuItem.Copy, "Copy"),
            new MenuItemDesc(ContextMenuItem.CopyWithDeltas, "Copy with time deltas"),
            new MenuItemDesc(ContextMenuItem.Delete, "Delete"),
            new MenuItemDesc(ContextMenuItem.Properties, "Properties")
        })
        {
            if ((menuItemsMask & item.Bit) != 0)
            {
                menuItems.Add(new LogJoint.UI.Presenters.ContextMenuItem(item.Text, () => { viewModel.OnMenuItemClicked(item.Bit); }));
            }
        }
        if (menuItems.Count > 0)
        {
            presentation.ContextMenu.ShowMenu(menuItems,
                new Drawing.PointF((float)e.ClientX, (float)e.ClientY));
        }
    }
}