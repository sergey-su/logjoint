@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.MessagePropertiesDialog
@implements IDisposable
@inject LogJoint.Wasm.ViewProxies viewProxies
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class="message-properties @Class">
    @{var d = viewModel.Data;}
    <div class="grid">
        <div>Time:</div>
        <div class="value">@d.TimeValue</div>

        <div>Log source:</div>
        <a class="value" href="@(d.SourceLinkEnabled ? "#" : "")" @onclick:preventDefault @onclick="@(e => viewModel.OnSourceLinkClicked())">@d.SourceLinkValue</a>

        <div>Bookmarked:</div>
        <div class="value">
            <span class="bookmark-status">@d.BookmarkedStatusText</span>
            <a href="@(d.BookmarkActionLinkEnabled ? "#" : "")" @onclick:preventDefault @onclick="@(e => viewModel.OnBookmarkActionClicked())">@d.BookmarkActionLinkText</a>
        </div>

        @if (d.MessageLinkEnabled)
        {
            <div>Related link:</div>
            <a class="value" href="@(d.MessageLinkValue)" target="_blank" title="@(d.MessageLinkValue)">@d.MessageLinkValue</a>
        }

        <div class="contents-label">Contents</div>
        <TabsView Tabs=@tabInfos() SelectedTab=d.ContentViewModeIndex.GetValueOrDefault() OnSelect=viewModel.OnContentViewModeChange />
    </div>
    <InlineSearch ViewModel="@viewModel.InlineSearch" />
    <div class="contents" @ref="textRef" tabindex="0">
        @foreach (var segment in d.TextSegments)
        {
            <MessagePropertiesTextSegment class="@SegmentClass(segment.Type)"
                Text=@segment.Value.Value
                IsPrimary="@(segment.Type == TextSegmentType.PrimarySearchResult)" />
        }
    </div>
</div>

@code {
    private IDialogViewModel viewModel;
    private ISubscription subscription;
    private ElementReference textRef;
    private IDisposable keyHandler;
    private Func<IReadOnlyList<TabsView.TabInfo>> tabInfos;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        if (viewProxies.MessageProperties.ViewModel == null)
        {
            presentation.PresentersFacade.ShowMessageProperties();
        }
        viewModel = viewProxies.MessageProperties.ViewModel;

        tabInfos = Selectors.Create(() => viewModel.Data.ContentViewModes, modes => modes.Select(m => new TabsView.TabInfo
        {
            Caption = m
        }).ToArray());

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => viewModel.Data,
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        keyHandler?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            keyHandler = await jsInterop.Keyboard.AddHandler(textRef, new KeyboardInterop.Options
            {
                PreventDefault = true,
                StopPropagation = true,
                Handler = async () =>
                {
                    var selection = await jsInterop.Selection.GetSelectionInElement(textRef);
                    viewModel.OnSearchShortcutPressed(selection);
                }
            }, "Edit+F/i");
        }
    }

    static string SegmentClass(TextSegmentType type) => type switch
    {
        TextSegmentType.PrimarySearchResult => "hl-primary",
        TextSegmentType.SecondarySearchResult => "hl",
        TextSegmentType.Annotation => "annotation",
        _ => "",
    };
}