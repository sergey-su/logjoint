@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.FiltersListBox
@implements IDisposable
@inject JsInterop jsInterop

<ListView Items="@ViewModel.Items" 
          OnSelect="@(items => ViewModel.OnChangeSelection(items.OfType<IViewItem>().ToArray()))" 
          Class="@ListClass" ItemClass="filters-list-item"
          OnDoubleClick="HandleDoubleClick"
          ChangeNotification="@ViewModel.ChangeNotification"
          OnKeyDown="HandleKeyDown">
    <ItemTemplate>
        @{var item = (IViewItem)context;}
        @if (item.ImageType == ViewItemImageType.Include)
        {
            <div class="icon include" title=@item.ActionTooltip>✔</div>
        }
        else if (item.ImageType == ViewItemImageType.Exclude)
        {
            <div class="icon exclude" title=@item.ActionTooltip>✘</div>
        }
        else
        {
            <div class="icon"></div>
        }
        @if (item.IsChecked != null)
        {
            <input type="checkbox" class="checkbox-or-placeholder" title=@item.CheckboxTooltip checked="@item.IsChecked"
               @oninput="@(e => ViewModel.OnItemChecked(item, e.Value is bool x && x))" />
        }
        else
        {
            <div class="checkbox-or-placeholder">&nbsp;</div>
        }
        <span title=@item.ActionTooltip style="@GetItemStyle(item)">
            @item.ToString()
        </span>
    </ItemTemplate>
</ListView>

@code {
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IViewModel ViewModel { get; set; }

    string ListClass => $"filters-list {Class}"; // todo: factor in enabled state

    protected override void OnInitialized()
    {
        subscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (ViewModel.IsEnabled, ViewModel.Items),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (eventArgs.Key == "Enter")
        {
            ViewModel.OnEnterPressed();
        }
        else if (eventArgs.Key == "Delete" || eventArgs.Key == "Backspace")
        {
            ViewModel.OnDeletePressed();
        }
        else if (eventArgs.Key == " ")
        {
            MaybeToggleCheckedStateByKeyboardShortcut(item);
        }
    }

    async void HandleDoubleClick(LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (await jsInterop.Keyboard.GetFocusedElementTag() != "INPUT") // Ignore double-click on the checkbox
        {
            ViewModel.OnDoubleClicked();
        }
    }

    string GetItemStyle(IViewItem item)
    {
        var cl = (item.IsSelected || !item.Color.HasValue) ? "inherit" : LogJoint.Drawing.ColorExtensions.ToHtmlColor(item.Color.Value);
        return $"background-color: {cl}";
    }

    async void MaybeToggleCheckedStateByKeyboardShortcut(LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        var viewItem = item as IViewItem;
        if (viewItem != null && viewItem.IsChecked.HasValue &&
            await jsInterop.Keyboard.GetFocusedElementTag() != "INPUT") // if checkbox is focused, it'll handle the keyboard itself
        {
            ViewModel.OnItemChecked(viewItem, !viewItem.IsChecked.GetValueOrDefault(true));
        }
    }
}