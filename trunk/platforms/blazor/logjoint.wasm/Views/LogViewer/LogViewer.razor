@namespace LogJoint.Wasm.UI.LogViewer
@using LogJoint
@using LogJoint.UI.Presenters.LogViewer
@using LogJoint.Settings
@implements IAsyncDisposable
@implements IView
@inject IJSRuntime jsRuntime
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class="logview @Class @(viewModel.TimeMaxLength > 0 ? "time-visible" : "")" tabindex="0" @onkeydown="@(e => viewModel.OnKeyPressed(GetKey(e)))"
@onfocus="@(e => focused = true)" @onblur="@(e => focused = false)" @ref="element">
    <span class="measure-text" @ref="measureElement">&nbsp;</span>
    <div class="scroll-outer nice-scroll" @onwheel="@(e => viewModel.OnIncrementalVScroll((float)(e.DeltaY / charHeight)))" @ref="scrollOuter">
        <div class="scroll-inner" style="top: @TopProperty" @ref="scrollInner"
        @ongotpointercapture="@(e => { pointerCaptured = true; })" @onlostpointercapture="@(e => { pointerCaptured = false; })"
        @onpointermove="@(pointerCaptured ? HandleCapturedMove : null)">
            @foreach (var item in @viewModel.ViewLines)
            {
                <div class="logline"
                @key="item.LineIndex"
                style="@GetLogLineStyle(item.ContextColor)"
                @onmousedown="@(e => this.HandleMouseDown(e, item))"
                @oncontextmenu="@(e => this.HandleContextMenu(e, item))" @oncontextmenu:preventDefault>
                    @if (item.SelectedBackground.HasValue)
                    {
                        <span class="pad sel" style=@PadStyle(item.SelectedBackground.Value.Item1, item.SelectedBackground.Value.Item2, item.TextAnnotations)></span>
                    }
                    @if (item.SelectionHighlightingRanges != null)
                    {
                        @foreach (var r in item.SelectionHighlightingRanges)
                        {
                            <span class="pad selhl" style=@PadStyle(r.Item1, r.Item2, item.TextAnnotations)></span>
                        }
                    }
                    @if (item.SearchResultHighlightingRanges != null)
                    {
                        @foreach (var r in item.SearchResultHighlightingRanges)
                        {
                            <span class="pad srhl" style=@PadStyle(r.Item1, r.Item2, item.TextAnnotations)></span>
                        }
                    }
                    @if (item.HighlightingFiltersHighlightingRanges != null)
                    {
                        @foreach (var r in item.HighlightingFiltersHighlightingRanges)
                        {
                            <span class="pad" style="@PadStyle(r.Item1, r.Item2, item.TextAnnotations); background-color: @Drawing.ColorExtensions.ToHtmlColor(@r.Item3)"></span>
                        }
                    }
                    @if (item.TextAnnotations != null)
                    {
                        @foreach (var r in item.TextAnnotations)
                        {
                            //<span class="pad annotated" style=@PadStyle(r.Item1, r.Item2, item.TextAnnotations)></span>
                        }
                    }
                    @if (item.CursorCharIndex.HasValue)
                    {
                        <span class="@(item.CursorVisible ? "pad cur" : "pad curhid")" style=@PadStyle(item.CursorCharIndex.Value, item.CursorCharIndex.Value, item.TextAnnotations)></span>
                    }
                    @if (item.TextLineValue.Length == 0)
                    {
                        <span class="txt">@(" ")</span>
                    }
                    else
                    {
                        int lastAnnotatonStart = 0;
                        @if (item.TextAnnotations != null)
                        {
                            @foreach (var ann in item.TextAnnotations)
                            {
                                @if (ann.TextStartIndex > lastAnnotatonStart)
                                {
                                    <span class="txt">@item.TextLineValue.Substring(lastAnnotatonStart, ann.TextStartIndex - lastAnnotatonStart)</span>
                                }
                                <span class="annotation" style="padding: 0px @(charWidth/3.0)px; margin: 0px @(charWidth/3.0)px 0px @(charWidth)px">@ann.Value</span>
                                lastAnnotatonStart = ann.TextStartIndex;
                            }
                        }
                        @if (item.TextLineValue.Length > lastAnnotatonStart)
                        {
                            <span class="txt">@item.TextLineValue.Substring(lastAnnotatonStart, item.TextLineValue.Length - lastAnnotatonStart)</span>
                        }
                    }
                    @if (item.HasMessageSeparator)
                    {
                        <div class="end-of-multiline-message"></div>
                    }
                </div>
            }
        </div>
        @if (viewModel.EmptyViewMessage != null)
        {
            <div class="empty-view-message">
                @foreach (var segment in ViewModel.EmptyViewMessage)
                {
                    @(" ")
                    if (segment.Click != null)
                    {
                        <a href="#" @onclick:preventDefault @onclick="@(segment.Click)">@segment.Text</a>
                    }
                    else if (segment.Uri != null)
                    {
                        <a href="@segment.Uri.ToString()" target="_blank">@segment.Text</a>
                    }
                    else
                    {
                        <span>@segment.Text</span>
                    }
                }
            </div>
        }
    </div>
    <div class="outline" style="top: @TopProperty">
        @foreach (var item in @viewModel.ViewLines)
        {
            <div @key="item.LineIndex" class="item"
            @onmousedown="@(e => viewModel.OnMessageMouseEvent(item, 0,
                                GetMessageMouseEventFlags(e) | MessageMouseEventFlag.OulineBoxesArea, null))">
                @{var (focusedMarkClass, tooltip) = GetFocusedMessageRenderData(viewModel.FocusedMessageMark, item);}
                <span class="p @focusedMarkClass" title=@tooltip>@(" ")</span>
                @if (item.IsBookmarked)
                {
                    <span class="i b">@(" ")</span>
                }
                @if (item.Severity == SeverityIcon.Error)
                {
                    <span class="i e">@(" ")</span>
                }
                else if (item.Severity == SeverityIcon.Warning)
                {
                    <span class="i w">@(" ")</span>
                }
                @(" ")
            </div>
        }
    </div>
    @if (viewModel.TimeMaxLength > 0)
    { 
        <div class="time" style="top: @TopProperty">
            @foreach (var item in @viewModel.ViewLines)
            {
                <div style="@GetLogLineStyle(item.ContextColor)">@(!string.IsNullOrEmpty(item.Time) ? item.Time : " ")</div>
            }
        </div>
    }
    <div class="vsroller"><div class="slider" @ref="sliderElement" style="top: @string.Format("{0}%", viewModel.VerticalScrollerPosition.GetValueOrDefault(0)*100)"></div></div>
</div>

@code {
    private IViewModel viewModel => ViewModel;
    private ISubscription subscription;
    private ElementReference measureElement, scrollOuter, sliderElement, element, scrollInner;
    private double charWidth = 1;
    private double charHeight = 1;
    private IAsyncDisposable resizeObserverHandle;
    private DotNetObjectReference<LogViewer> selfRef;
    private float displayLinesPerPage = 1;
    private bool pointerCaptured;
    private bool focused;
    private static int annotationPadding = 2;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        viewModel.SetView(this);

        selfRef = DotNetObjectReference.Create(this);

        var updateLines = Updaters.Create(
            () => (viewModel.ViewLines, viewModel.FirstDisplayMessageScrolledLines,
                viewModel.FocusedMessageMark, viewModel.EmptyViewMessage),
            _ => StateHasChanged()
        );

        subscription = viewModel.ChangeNotification.CreateSubscription(() =>
        {
            updateLines();
        });
    }

    public async ValueTask DisposeAsync()
    {
        viewModel.SetView(null);
        subscription?.Dispose();
        await resizeObserverHandle.DisposeAsync();
        selfRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            charWidth = jsInterop.Layout.GetElementWidth(measureElement);
            charHeight = jsInterop.Layout.GetElementHeight(measureElement);
            UpdateDisplayLinesPerPage();
            resizeObserverHandle = await jsInterop.Resize.ObserveResize(scrollOuter, () =>
            {
                UpdateDisplayLinesPerPage();
                viewModel?.ChangeNotification?.Post();
            });
            await jsRuntime.InvokeVoidAsync("logjoint.logViewer.initVScroller", sliderElement, selfRef);
            await jsInterop.Mouse.SetMouseCapturingHandler(scrollInner);
            await jsInterop.Keyboard.AddDefaultPreventingHandler(element, "Meta+ArrowLeft", "Meta+ArrowRight"); // to disable unwanted navigation
        }
    }

    float IView.DisplayLinesPerPage => displayLinesPerPage;

    bool IView.HasInputFocus => focused;

    string[] IViewFonts.AvailablePreferredFamilies => new string[0];

    KeyValuePair<Appearance.LogFontSize, int>[] IViewFonts.FontSizes => new KeyValuePair<Appearance.LogFontSize, int>[0];

    object IView.GetContextMenuPopupData(int? viewLineIndex) => null;

    void IView.HScrollToSelectedText(int charIndex)
    {
        jsInterop.Scroll.ScrollLeftIntoView(scrollOuter, charWidth * charIndex);
    }

    void IView.PopupContextMenu(object contextMenuPopupData)
    {
    }

    async void IView.ReceiveInputFocus()
    {
        await element.FocusAsync();
    }

    void IView.SetViewModel(IViewModel value)
    {
    }

    static int ComputeDisplayCharIndex(int textCharIndex, IReadOnlyList<TextLineAnnotation> annotations)
    {
        if (annotations == null)
            return textCharIndex;
        int annotationsLength = 0;
        foreach (TextLineAnnotation annotation in annotations)
        {
            if (textCharIndex >= annotation.TextStartIndex)
                annotationsLength += annotation.Value.Length + annotationPadding;
        }
        return textCharIndex + annotationsLength;
    }

    static int ComputeTextCharIndex(int displayCharIndex, IReadOnlyList<TextLineAnnotation> annotations)
    {
        if (annotations == null)
            return displayCharIndex;
        int annotationsLength = 0;
        foreach (TextLineAnnotation annotation in annotations)
        {
            if (annotation.TextStartIndex + annotationsLength > displayCharIndex)
                break;
            if (displayCharIndex - annotationsLength <= annotation.TextStartIndex + annotation.Value.Length + annotationPadding)
            {
                // Chars inside the annotation are mapped to the beginning of the annotated text.
                return annotation.TextStartIndex;
            }
            annotationsLength += annotation.Value.Length + annotationPadding;
        }
        return displayCharIndex - annotationsLength;
    }

    string PadStyle(int beginIdx, int endIdx, IReadOnlyList<TextLineAnnotation> annotations)
    {
        beginIdx = ComputeDisplayCharIndex(beginIdx, annotations);
        endIdx = ComputeDisplayCharIndex(endIdx, annotations);
        return $"left: {beginIdx * charWidth}px; width: {(endIdx - beginIdx) * charWidth}px";
    }

    Key GetKey(KeyboardEventArgs keyboardEventArgs)
    {
        return GetMainKey(keyboardEventArgs) | GetModifierKeys(keyboardEventArgs);
    }

    Key GetModifierKeys(KeyboardEventArgs keyboardEventArgs)
    {
        var result = Key.None;
        if (keyboardEventArgs.ShiftKey)
        {
            result |= Key.ModifySelectionModifier;
        }
        if (jsInterop.Browser.IsMac && keyboardEventArgs.AltKey)
        {
            result |= Key.JumpOverWordsModifier;
        }
        if (!jsInterop.Browser.IsMac && keyboardEventArgs.CtrlKey)
        {
            result |= Key.JumpOverWordsModifier;
        }
        return result;
    }

    Key GetMainKey(KeyboardEventArgs keyboardEventArgs)
    {
        var ctrlOrCommand = keyboardEventArgs.CtrlKey || keyboardEventArgs.MetaKey;
        switch (keyboardEventArgs.Key)
        {
            case "ArrowUp":
                return ctrlOrCommand ? Key.BeginOfDocument : Key.Up;
            case "ArrowDown":
                return ctrlOrCommand ? Key.EndOfDocument : Key.Down;
            case "ArrowLeft":
                return keyboardEventArgs.MetaKey ? Key.BeginOfLine : Key.Left;
            case "ArrowRight":
                return keyboardEventArgs.MetaKey ? Key.EndOfLine : Key.Right;
            case "Home":
                return ctrlOrCommand ? Key.BeginOfDocument : Key.BeginOfLine;
            case "End":
                return ctrlOrCommand ? Key.EndOfDocument : Key.EndOfLine;
            case "PageUp": return Key.PageUp;
            case "PageDown": return Key.PageDown;
            case "B": return Key.BookmarkShortcut;
            case "b": return Key.BookmarkShortcut;
            case "c":
            case "C":
                return ctrlOrCommand ? Key.Copy : Key.None;
            default: return Key.None;
        }
    }

    LogJoint.UI.Presenters.LogViewer.MessageMouseEventFlag GetMessageMouseEventFlags(MouseEventArgs mouseEventArgs)
    {
        var result = MessageMouseEventFlag.None;
        if (mouseEventArgs.Detail > 1)
            result |= MessageMouseEventFlag.DblClick;
        else
            result |= MessageMouseEventFlag.SingleClick;
        if (mouseEventArgs.ShiftKey)
            result |= MessageMouseEventFlag.ShiftIsHeld;
        if (mouseEventArgs.AltKey)
            result |= MessageMouseEventFlag.AltIsHeld;
        if (mouseEventArgs.CtrlKey)
            result |= MessageMouseEventFlag.CtrlIsHeld;
        if (mouseEventArgs.Button > 0)
            result |= MessageMouseEventFlag.RightMouseButton;
        return result;
    }

    int GetClickedCharIndex(LogJoint.UI.Presenters.LogViewer.ViewLine viewLine, MouseEventArgs mouseEventArgs)
    {
        var clickedChar = ComputeTextCharIndex((int)Math.Round(mouseEventArgs.OffsetX / charWidth), viewLine.TextAnnotations);
        return clickedChar;
    }

    string GetLogLineStyle(LogJoint.Drawing.Color? contextColor)
    {
        var ctxColor = contextColor.HasValue ? LogJoint.Drawing.ColorExtensions.ToHtmlColor(contextColor.Value) : "white";
        if (viewModel.ColorTheme == LogJoint.UI.Presenters.ColorThemeMode.Dark)
        {
            return $"color: {ctxColor}";
        }
        else
        {
            return $"background-color: {ctxColor}";
        }
    }

    void UpdateDisplayLinesPerPage()
    {
        var height = Math.Max(0, jsInterop.Layout.GetElementHeight(scrollOuter) - jsInterop.Layout.GetElementScrollerHeight(scrollOuter));
        displayLinesPerPage = (float)(height / charHeight);
    }

    [JSInvokable]
    public void OnVScroll(double value)
    {
        viewModel?.OnVScroll(Math.Clamp(value, 0, 1), true);
    }

    string TopProperty => string.Format("{0:000}px", -viewModel.FirstDisplayMessageScrolledLines * charHeight);

    void HandleCapturedMove(MouseEventArgs e)
    {
        if (e.Buttons != 1)
            return;
        var lineIndex = (int)Math.Floor(e.OffsetY / charHeight);
        if (lineIndex >= 0 && lineIndex < viewModel.ViewLines.Length)
        {
            var line = viewModel.ViewLines[lineIndex];
            viewModel.OnMessageMouseEvent(line, GetClickedCharIndex(line, e),
                MessageMouseEventFlag.ShiftIsHeld | MessageMouseEventFlag.CapturedMouseMove, null);
        }
    }

    static (string cssClass, string tooltip) GetFocusedMessageRenderData(IFocusedMessageData data, ViewLine item)
    {
        if (data is MasterFocusedMessageData master)
            return (master.LineIndex == item.LineIndex ? "f" : "", "");
        if (data is SlaveFocusedMessageData slave)
            return (
                slave.UpperBound == item.LineIndex + 1 ? (slave.LowerBound != slave.UpperBound ? "fs" : "fs l") :
                (slave.LowerBound == 0 && slave.UpperBound == 0 && item.LineIndex == 0) ? "fs r" :
                "",
                slave.Tooltip
            );
        return ("", "");
    }

    void HandleMouseDown(MouseEventArgs e, ViewLine line)
    {
        viewModel.OnMessageMouseEvent(line, GetClickedCharIndex(line, e), GetMessageMouseEventFlags(e), null);
    }

    record MenuItemDesc(ContextMenuItem Bit, string Text);

    void HandleContextMenu(MouseEventArgs e, ViewLine line)
    {
        MenuData menuData = viewModel.OnMenuOpening();
        var menuItems = new List<LogJoint.UI.Presenters.ContextMenuItem>();
        foreach (MenuItemDesc item in new[] {
            new MenuItemDesc(ContextMenuItem.Copy, "Copy"),
            new MenuItemDesc(ContextMenuItem.ToggleBmk, "Toggle bookmark"),
            new MenuItemDesc(ContextMenuItem.GotoNextMessageInTheThread, "Next message in the thread"),
            new MenuItemDesc(ContextMenuItem.GotoPrevMessageInTheThread, "Prev message in the thread"),
            new MenuItemDesc(ContextMenuItem.Annotate, "Annotate")
        })
        {
            if ((menuData.VisibleItems & item.Bit) != 0)
            {
                menuItems.Add(new LogJoint.UI.Presenters.ContextMenuItem(item.Text, () => { viewModel.OnMenuItemClicked(item.Bit); }));
            }
        }
        if (menuItems.Count > 0)
        {
            presentation.ContextMenu.ShowMenu(menuItems,
                new Drawing.PointF((float)e.ClientX, (float)e.ClientY));
        }
    }
}
