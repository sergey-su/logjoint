@namespace  LogJoint.Wasm.UI
@inject JsInterop jsInterop

@if (Visible)
{
    <div class="modal" @onmousedown="HandleClickOutside" @onkeydown="HandleKeyDown" @ref="element">
        <FirstRenderDetector OnFirstRender="OnFirstRender" OnDispose="OnDispose" />
        <div class="contents @Class" style="@Style" @onmousedown:stopPropagation>
            @ChildContent
        </div>
    </div>
}

@code {
    private ElementReference element;
    private IAsyncDisposable focusTrap;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Visible { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public Action ClickOutside { get; set; }

    [Parameter]
    public Action OnCancel { get; set; }

    async void HandleClickOutside()
    {
        await Task.Yield();
        ClickOutside?.Invoke();
    }

    async void HandleKeyDown(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Escape")
        {
            await Task.Yield();
            OnCancel?.Invoke();
        }
    }

    async Task OnFirstRender()
    {
        focusTrap = await jsInterop.Keyboard.TrapFocusInModal(element);
    }

    async Task OnDispose()
    {
        if (focusTrap != null)
        {
            await focusTrap.DisposeAsync();
        }
    }
}
