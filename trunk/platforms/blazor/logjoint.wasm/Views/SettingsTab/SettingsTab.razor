@namespace LogJoint.Wasm.UI
@inject IJSRuntime jsRuntime;
@inject LogJoint.ModelObjects model;
@inject TraceListener traceListener;
@inject JsInterop jsInterop;
@inject LogJoint.UI.Presenters.GlobalSettingsSystemThemeDetector themeDetector;
@using System.IO;
@using System.Text;
@using LogJoint.UI.Presenters.Reactive;
@using System.Collections.Immutable;
@using System.Xml.Linq;

<div class='@Class settings-panel nice-scroll'>
    <label>
        <input type="checkbox"
               checked="@(themeDetector.Mode == LogJoint.UI.Presenters.ColorThemeMode.Dark)"
               @oninput="@(e => SetDarkMode(e.Value is bool x && x))" />Dark mode
    </label>
    <p>
        Debug agent address: <input
            type="text"
            value="@(debugAgentAddress ?? string.Empty)"
            disabled="@(debugAgentAddress == null)"
            @oninput="@(e => SetDebugAgentAddress(e.Value as string ?? ""))" />
    </p>
    <p class="debug-label">
        Advanced options
        <a href="#" @onclick:preventDefault @onclick="ToggleDebugOptions">@(debugOptionsVisible ? "hide" : "show")</a>
    </p>
    @if (debugOptionsVisible)
    {
        <div class="debug">
            <button @onclick="DownloadDebugLog">Download debug log</button>
            <button @onclick="LoadByUrl" hidden>Load by blob URL</button>
            <button @onclick="LoadChromeDebugLog" hidden>Load Stream as Chrome debug log</button>
            <button @onclick="LoadUnspecifiedStream" hidden>Load unspecified stream</button>
            <button @onclick="TestLogFs" hidden>Test log fs</button>
            <div>
                <label>db store:</label>
                <select @bind="dbStoreName">
                    <option value="userData">userData</option>
                    <option value="contentCache">contentCache</option>
                </select>
                <label>key substring:</label><input @bind="dbKeyName" />
                <button @onclick="FindDbKeys">Find db keys</button>
                <ListView Items=@dbKeys
                          OnSelect="@(selected => SelectListItem(selected, ref dbKeys))"
                          ChangeNotification="@model.ChangeNotification"
                          Class="db-keys-list" />
                <button @onclick="DownloadDbValue">Download db value</button>
            </div>
            <div>
                <label>db store:</label>
                <input list="settings_debug_paths_suggestions" @bind="fileSystemPath">
                <datalist id="settings_debug_paths_suggestions">
                    <option value="/" />
                    <option value="@Path.GetDirectoryName(model.TempFilesManager.GenerateNewName())" />
                </datalist>
                <button @onclick="ListDirectory">List directory</button>
                <ListView Items=@fileSystemEntries
                          OnSelect="@(selected => SelectListItem(selected, ref fileSystemEntries))"
                          OnDoubleClick="UseDirectory"
                          ChangeNotification="@model.ChangeNotification"
                          Class="fs-entries-list" />
                <button @onclick="DownloadFile">Download file</button>
            </div>
            <input type="file" @ref="fileInputReference" hidden />
            <button @onclick="LoadLogSameWayChromeExtensionDoes">LoadLogSameWayChromeExtensionDoes</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Class { get; set; } = "";

    ElementReference fileInputReference;

    private string dbKeyName = "";
    private string dbStoreName = "userData";
    private ImmutableList<ListItem> dbKeys = ImmutableList<ListItem>.Empty;

    private string fileSystemPath = "/";
    private ImmutableList<ListItem> fileSystemEntries = ImmutableList<ListItem>.Empty;

    private bool debugOptionsVisible = false;

    private string debugAgentAddress = null;

    class ListItem : IListItem
    {
        public string Key { get; set; }
        public bool IsSelected { get; set; }
        public override string ToString() => Key;
    };

    protected override void OnInitialized()
    {
        LoadDebugAgentAddress();
    }

    void ToggleDebugOptions()
    {
        debugOptionsVisible = !debugOptionsVisible;
    }

    async void LoadByUrl()
    {
        var url = await jsRuntime.InvokeAsync<string>("logjoint.files.getUrl", fileInputReference);
        Console.WriteLine("Blob url: {0}", url);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(url)) },
            "Processing blob URL test"
        );
    }

    async void LoadChromeDebugLog()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        var factory = (IFileBasedLogProviderFactory)model.UserDefinedFormatsManager.Items.Single(f => f.FormatName == "Chrome debug log");
        await model.LogSourcesManager.Create(factory, factory.CreateParams(fileName));
    }

    async void LoadUnspecifiedStream()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        using (var keepAlive = model.FileSystem.OpenFile(fileName))
        {
            var task = model.LogSourcesPreprocessings.Preprocess(
                new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(fileName)) },
                "Processing Unspecified file"
            );
            await task;
        }
    }

    async void DownloadDebugLog()
    {
        var entries = traceListener.ClearMemBufferAndGetCurrentEntries();
        using (var writer = new System.IO.StringWriter())
        {
            entries.ForEach(e => e.Write(writer));
            await jsInterop.SaveAs.SaveAs(writer.ToString(), string.Format(@"wasm-debug-{0:yyyy-MM-ddTHH-mm-ss}.log", DateTime.Now));
        }
    }

    async Task TestLogFs()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        using (var stream = await model.FileSystem.OpenFile(fileName))
        {
            byte[] buf = new byte[1024];
            var read = await stream.ReadAsync(buf, 0, buf.Length);
            var hash = LogJoint.Hashing.GetStableHashCode(buf);
            Console.WriteLine("{0} {1}", read, hash);
        }
    }

    async Task FindDbKeys()
    {
        dbKeys = ImmutableList.CreateRange(
            (await jsInterop.IndexedDB.Keys(dbStoreName))
            .Where(k => k.Contains(dbKeyName ?? ""))
            .Select(k => new ListItem() { Key = k, IsSelected = false })
        );
    }

    void SelectListItem(IEnumerable<IListItem> selected, ref ImmutableList<ListItem> list)
    {
        var selectedLookup = selected.Select(i => i.Key).ToHashSet();
        list = ImmutableList.CreateRange(
            list.Select(k => new ListItem() { Key = k.Key, IsSelected = selectedLookup.Contains(k.Key) }));
        StateHasChanged();
    }

    async Task DownloadDbValue()
    {
        var key = dbKeys.Where(k => k.IsSelected).Select(k => k.Key).FirstOrDefault();
        if (key != null)
        {
            var value = await jsInterop.IndexedDB.Get<byte[]>(dbStoreName, key);
            await jsInterop.SaveAs.SaveAs(value, key);
        }
    }

    void SetDarkMode(bool dark)
    {
        themeDetector.SetMode(dark ? LogJoint.UI.Presenters.ColorThemeMode.Dark : LogJoint.UI.Presenters.ColorThemeMode.Light);
    }

    async void LoadLogSameWayChromeExtensionDoes()
    {
        var url = @"https://test.url/9898";
        Preprocessing.IPreprocessingStep step =
            model.ExpensibilityEntryPoint.Preprocessing.ExtensionsRegistry.Items.Select(e => e.CreateStepByName("goog-agent-download",
                new LogJoint.Preprocessing.PreprocessingStepParams(url, displayName: "My test log"))).FirstOrDefault(s => s != null);
        if (step == null)
        {
            throw new Exception("Can not find goog agent");
        }
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { step },
            "Processing file"
        );
        await task;
    }

    void ListDirectory()
    {
        if (Directory.Exists(fileSystemPath))
        {
            fileSystemEntries = ImmutableList.CreateRange(
                Directory.EnumerateFileSystemEntries(fileSystemPath).Select(e => new ListItem() { Key = e })
            );
        }
        else
        {
            fileSystemEntries = ImmutableList<ListItem>.Empty;
        }
    }

    void UseDirectory(IListItem item)
    {
        fileSystemPath = item.Key;
    }

    async Task DownloadFile()
    {
        var fname = fileSystemEntries.Where(k => k.IsSelected).Select(k => k.Key).FirstOrDefault();
        if (fname != null && File.Exists(fname))
        {
            var value = await File.ReadAllTextAsync(fname);
            await jsInterop.SaveAs.SaveAs(value, Path.GetFileName(fname));
        }
    }

    async void LoadDebugAgentAddress()
    {
        var storageEntry = await model.StorageManager.GetEntry("debug-agent");
        await using var section = await storageEntry.OpenXMLSection("settings", Persistence.StorageSectionOpenFlag.ReadOnly);
        debugAgentAddress = section.Data.Root?.Attribute("address")?.Value ?? "";
        StateHasChanged();
    }


    async void SetDebugAgentAddress(string address)
    {
        var storageEntry = await model.StorageManager.GetEntry("debug-agent");
        await using var section = await storageEntry.OpenXMLSection("settings", Persistence.StorageSectionOpenFlag.ReadWrite);
        if (section.Data.Root == null)
            section.Data.Add(new XElement("settings"));
        section.Data.Root.SetAttributeValue("address", address);
        debugAgentAddress = address;
        StateHasChanged();
    }
}
