@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.SourcesList
@implements IDisposable
@implements IView
@inject LogJoint.UI.Presenters.PresentationObjects presentation
@inject JsInterop jsInterop

<TreeView class="@Class"
          ChangeNotification="@viewModel.ChangeNotification"
          Root="@viewModel.RootItem"
          OnSelect="@(nodes => viewModel.OnSelectionChange(nodes.OfType<IViewItem>().ToArray()))"
          OnExpand="@(node => viewModel.OnItemExpand((IViewItem)node))"
          OnCollapse="@(node => viewModel.OnItemCollapse((IViewItem)node))"
          OnDoubleClick="HandleDoubleClick"
          OnKeyDown="HandleKeyDown"
          NodeClass="log-sources-list-item">
    <NodeTemplate>
        @{var item = (IViewItem)context;}
        <div class="p @GetFocusedMarkClass(item)"></div>
        @if (item.Checked != null)
        {
            <input type="checkbox" checked="@item.Checked" @oninput="@(e => viewModel.OnItemCheck(item, e.Value is bool x && x))" />
        }
        <span style="@GetItemStyle(item)">
            @if (!string.IsNullOrEmpty(item.Annotation))
            {
                <span class="annotation">@item.Annotation</span>
            }
            @item.Description
        </span>
    </NodeTemplate>
</TreeView>

@code {
    private IViewModel viewModel => presentation.ViewModels.SourcesList;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.RootItem, viewModel.FocusedMessageItem),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    void IView.SetTopItem(IViewItem item)
    {
        // todo
    }

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        if (eventArgs.Key == "Delete" || eventArgs.Key == "Backspace")
            viewModel.OnDeleteButtonPressed();
        else if (eventArgs.Key == "Enter")
            viewModel.OnEnterKeyPressed();
        else if (eventArgs.Key == " ")
            MaybeToggleCheckedStateByKeyboardShortcut(node);
        else if (eventArgs.Key.ToLower() == "c" && jsInterop.Browser.HasEditKey(eventArgs))
            viewModel.OnCopyShortcutPressed();
        else if (eventArgs.Key.ToLower() == "a" && jsInterop.Browser.HasEditKey(eventArgs))
            viewModel.OnSelectAllShortcutPressed();
    }

    async void MaybeToggleCheckedStateByKeyboardShortcut(LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        var item = node as IViewItem;
        if (item != null && item.Checked.HasValue &&
            await jsInterop.Keyboard.GetFocusedElementTag() != "INPUT") // if checkbox is focused, it'll handle the keyboard itself
        {
            viewModel.OnItemCheck(item, !item.Checked.GetValueOrDefault(true));
        }
    }

    string GetItemStyle(IViewItem item)
    {
        var cl = item.IsSelected ? "inherit" : LogJoint.Drawing.ColorExtensions.ToHtmlColor(item.Color.value);
        if (viewModel.ColorTheme == LogJoint.UI.Presenters.ColorThemeMode.Dark)
        {
            return $"color: {cl}";
        }
        else
        {
            return $"background-color: {cl}";
        }
    }

    string GetFocusedMarkClass(IViewItem item)
    {
        return item == viewModel.FocusedMessageItem ? "f" : "";
    }

    async void HandleDoubleClick(LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        if (await jsInterop.Keyboard.GetFocusedElementTag() != "INPUT") // Ignore double-click on the checkbox
        {
            viewModel.OnEnterKeyPressed();
        }
    }
}
